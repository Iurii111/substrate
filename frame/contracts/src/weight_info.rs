// Copyright 2020 Parity Technologies (UK) Ltd.
// This file is part of Substrate.

// Substrate is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Substrate is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Substrate. If not, see <http://www.gnu.org/licenses/>.

//! This module contains the `WeightInfo` trait and its unsafe implementation on `()`.

use frame_support::weights::Weight;

/// Should be implemented by automatically generated code of the benchmarking system for
/// every runtime that makes use of this pallet.
/// This trait is also implemented on `()`. The implemention on `()` is **unsafe** and must
/// only be used during development. Proper weights can be generated by running the
/// pallet_contracts benchmark suite for the runtime in question.
pub trait WeightInfo {
	fn update_schedule() -> Weight;
	fn put_code(n: u32, ) -> Weight;
	fn instantiate(n: u32, ) -> Weight;
	fn call() -> Weight;
	fn claim_surcharge() -> Weight;
	fn seal_caller(r: u32, ) -> Weight;
	fn seal_address(r: u32, ) -> Weight;
	fn seal_gas_left(r: u32, ) -> Weight;
	fn seal_balance(r: u32, ) -> Weight;
	fn seal_value_transferred(r: u32, ) -> Weight;
	fn seal_minimum_balance(r: u32, ) -> Weight;
	fn seal_tombstone_deposit(r: u32, ) -> Weight;
	fn seal_rent_allowance(r: u32, ) -> Weight;
	fn seal_block_number(r: u32, ) -> Weight;
	fn seal_weight_to_fee(r: u32, ) -> Weight;
	fn seal_gas(r: u32, ) -> Weight;
	fn seal_input(r: u32, ) -> Weight;
	fn seal_input_per_kb(n: u32, ) -> Weight;
	fn seal_return(r: u32, ) -> Weight;
	fn seal_return_per_kb(n: u32, ) -> Weight;
	fn seal_terminate(r: u32, ) -> Weight;
	fn seal_restore_to(r: u32, ) -> Weight;
	fn seal_restore_to_per_delta(d: u32, ) -> Weight;
	fn seal_random(r: u32, ) -> Weight;
	fn seal_deposit_event(r: u32, ) -> Weight;
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight;
	fn seal_set_rent_allowance(r: u32, ) -> Weight;
	fn seal_set_storage(r: u32, ) -> Weight;
	fn seal_set_storage_per_kb(n: u32, ) -> Weight;
	fn seal_clear_storage(r: u32, ) -> Weight;
	fn seal_get_storage(r: u32, ) -> Weight;
	fn seal_get_storage_per_kb(n: u32, ) -> Weight;
	fn seal_transfer(r: u32, ) -> Weight;
	fn seal_call(r: u32, ) -> Weight;
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight;
	fn seal_instantiate(r: u32, ) -> Weight;
	fn seal_instantiate_per_input_output_kb(i: u32, o: u32, ) -> Weight;
	fn seal_hash_sha2_256(r: u32, ) -> Weight;
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_keccak_256(r: u32, ) -> Weight;
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_256(r: u32, ) -> Weight;
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight;
	fn seal_hash_blake2_128(r: u32, ) -> Weight;
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight;
}

/// Unsafe implementation that must only be used for development.
#[allow(unused_variables)]
impl WeightInfo for () {
	fn update_schedule() -> Weight { 1 }
	fn put_code(n: u32, ) -> Weight { 1 }
	fn instantiate(n: u32, ) -> Weight { 1 }
	fn call() -> Weight { 1 }
	fn claim_surcharge() -> Weight { 1 }
	fn seal_caller(r: u32, ) -> Weight { 1 }
	fn seal_address(r: u32, ) -> Weight { 1 }
	fn seal_gas_left(r: u32, ) -> Weight { 1 }
	fn seal_balance(r: u32, ) -> Weight { 1 }
	fn seal_value_transferred(r: u32, ) -> Weight { 1 }
	fn seal_minimum_balance(r: u32, ) -> Weight { 1 }
	fn seal_tombstone_deposit(r: u32, ) -> Weight { 1 }
	fn seal_rent_allowance(r: u32, ) -> Weight { 1 }
	fn seal_block_number(r: u32, ) -> Weight { 1 }
	fn seal_weight_to_fee(r: u32, ) -> Weight { 1 }
	fn seal_gas(r: u32, ) -> Weight { 1 }
	fn seal_input(r: u32, ) -> Weight { 1 }
	fn seal_input_per_kb(n: u32, ) -> Weight { 1 }
	fn seal_return(r: u32, ) -> Weight { 1 }
	fn seal_return_per_kb(n: u32, ) -> Weight { 1 }
	fn seal_terminate(r: u32, ) -> Weight { 1 }
	fn seal_restore_to(r: u32, ) -> Weight { 1 }
	fn seal_restore_to_per_delta(d: u32, ) -> Weight { 1 }
	fn seal_random(r: u32, ) -> Weight { 1 }
	fn seal_deposit_event(r: u32, ) -> Weight { 1 }
	fn seal_deposit_event_per_topic_and_kb(t: u32, n: u32, ) -> Weight { 1 }
	fn seal_set_rent_allowance(r: u32, ) -> Weight { 1 }
	fn seal_set_storage(r: u32, ) -> Weight { 1 }
	fn seal_set_storage_per_kb(n: u32, ) -> Weight { 1 }
	fn seal_clear_storage(r: u32, ) -> Weight { 1 }
	fn seal_get_storage(r: u32, ) -> Weight { 1 }
	fn seal_get_storage_per_kb(n: u32, ) -> Weight { 1 }
	fn seal_transfer(r: u32, ) -> Weight { 1 }
	fn seal_call(r: u32, ) -> Weight { 1 }
	fn seal_call_per_transfer_input_output_kb(t: u32, i: u32, o: u32, ) -> Weight { 1 }
	fn seal_instantiate(r: u32, ) -> Weight { 1 }
	fn seal_instantiate_per_input_output_kb(i: u32, o: u32, ) -> Weight { 1 }
	fn seal_hash_sha2_256(r: u32, ) -> Weight { 1 }
	fn seal_hash_sha2_256_per_kb(n: u32, ) -> Weight { 1 }
	fn seal_hash_keccak_256(r: u32, ) -> Weight { 1 }
	fn seal_hash_keccak_256_per_kb(n: u32, ) -> Weight { 1 }
	fn seal_hash_blake2_256(r: u32, ) -> Weight { 1 }
	fn seal_hash_blake2_256_per_kb(n: u32, ) -> Weight { 1 }
	fn seal_hash_blake2_128(r: u32, ) -> Weight { 1 }
	fn seal_hash_blake2_128_per_kb(n: u32, ) -> Weight { 1 }
}
